#!/usr/bin/env python3
"""
Script de d√©marrage pour Mila Assist v2.0
Assistant virtuel pour streameur - Permet de lancer diff√©rents modes de fonctionnement
"""

import os
import sys
import argparse
import subprocess
import threading
import time
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def start_api_server():
    """D√©marre le serveur API"""
    logger.info("D√©marrage du serveur API...")
    try:
        from api import ChatbotAPI
        api = ChatbotAPI()
        api.run(host='localhost', port=5001, debug=False)
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage de l'API: {e}")

def start_web_app():
    """D√©marre l'application web"""
    logger.info("D√©marrage de l'application web...")
    try:
        import app_v2
        app_v2.app.run(host='localhost', port=5000, debug=False)
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage de l'app web: {e}")

def start_legacy_app():
    """D√©marre l'application legacy (d√©sactiv√© - fichier archiv√©)"""
    logger.warning("Mode legacy d√©sactiv√© : app.py a √©t√© archiv√©")
    logger.info("Utilisez le mode 'web' pour lancer app_v2.py")

def start_full_system():
    """D√©marre le syst√®me complet (API + Web)"""
    logger.info("D√©marrage du syst√®me complet...")
    
    # D√©marrage de l'API en arri√®re-plan
    api_thread = threading.Thread(target=start_api_server, daemon=True)
    api_thread.start()
    
    # Attendre que l'API d√©marre
    time.sleep(3)
    
    # D√©marrage de l'application web
    start_web_app()

def run_tests():
    """Ex√©cute les tests de migration (d√©sactiv√© - fichier archiv√©)"""
    logger.warning("Mode test d√©sactiv√© : migrate_and_test.py a √©t√© archiv√©")
    logger.info("Les fichiers de migration ont √©t√© d√©plac√©s vers a_supprimer/")
    return False

def install_dependencies():
    """Installe les d√©pendances"""
    logger.info("Installation des d√©pendances...")
    try:
        result = subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"],
                              cwd=os.path.dirname(__file__))
        return result.returncode == 0
    except Exception as e:
        logger.error(f"Erreur lors de l'installation: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description="Mila Assist - Assistant virtuel pour streameur")
    parser.add_argument("mode", choices=["api", "web", "full", "install"], 
                       help="Mode de d√©marrage")
    parser.add_argument("--host", default="localhost", help="Adresse d'√©coute")
    parser.add_argument("--port", type=int, default=5000, help="Port d'√©coute")
    parser.add_argument("--debug", action="store_true", help="Mode debug")
    
    args = parser.parse_args()
    
    logger.info(f"üöÄ Mila Assist - Mode: {args.mode}")
    
    try:
        if args.mode == "install":
            success = install_dependencies()
            if success:
                logger.info("‚úÖ Installation termin√©e avec succ√®s")
            else:
                logger.error("‚ùå Erreur lors de l'installation")
            return
        
        elif args.mode == "api":
            start_api_server()
        
        elif args.mode == "web":
            start_web_app()
        
        elif args.mode == "full":
            start_full_system()
        
        else:
            logger.error(f"Mode non reconnu: {args.mode}")
            return
        
    except KeyboardInterrupt:
        logger.info("Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
